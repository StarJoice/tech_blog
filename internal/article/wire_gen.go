// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package article

import (
	"github.com/StarJoice/tech_blog/internal/article/internal/event"
	"github.com/StarJoice/tech_blog/internal/article/internal/repository"
	"github.com/StarJoice/tech_blog/internal/article/internal/repository/dao"
	"github.com/StarJoice/tech_blog/internal/article/internal/service"
	"github.com/StarJoice/tech_blog/internal/article/internal/web"
	"github.com/StarJoice/tech_blog/internal/user"
	"github.com/ecodeclub/mq-api"
	"github.com/ego-component/egorm"
	"github.com/google/wire"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitModule(db *gorm.DB, u *user.Module, q mq.MQ) (*Module, error) {
	interactiveEventProducer, err := event.NewInteractiveEventProducer(q)
	if err != nil {
		return nil, err
	}
	articleDao := InitDao(db)
	articleRepository := repository.NewArticleCachedRepository(articleDao)
	serviceService := service.NewArticleSvc(interactiveEventProducer, articleRepository)
	userService := u.Svc
	articleHandler := web.NewArticleHandler(serviceService, userService)
	module := &Module{
		Svc: serviceService,
		Hdl: articleHandler,
	}
	return module, nil
}

// wire.go:

var ProviderSet = wire.NewSet(web.NewArticleHandler, repository.NewArticleCachedRepository, service.NewArticleSvc, event.NewInteractiveEventProducer, InitDao)

func InitDao(db *egorm.Component) dao.ArticleDao {
	err := dao.InitTable(db)
	if err != nil {
		panic(err)
	}
	return dao.NewArticleGormDao(db)
}
