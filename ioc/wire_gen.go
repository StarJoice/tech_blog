// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package ioc

import (
	"github.com/StarJoice/tech_blog/internal/article"
	"github.com/StarJoice/tech_blog/internal/comment"
	"github.com/StarJoice/tech_blog/internal/interactive"
	"github.com/StarJoice/tech_blog/internal/label"
	"github.com/StarJoice/tech_blog/internal/search"
	"github.com/StarJoice/tech_blog/internal/user"
	"github.com/google/wire"
)

import (
	_ "github.com/StarJoice/tech_blog/docs"
)

// Injectors from wire.go:

func InitApp() (*App, error) {
	cmdable := InitRedis()
	provider := InitSession(cmdable)
	db := InitDB()
	module, err := user.InitModule(db, cmdable)
	if err != nil {
		return nil, err
	}
	userHandler := module.Hdl
	mq, err := InitMq()
	if err != nil {
		return nil, err
	}
	articleModule, err := article.InitModule(db, module, mq)
	if err != nil {
		return nil, err
	}
	articleHandler := articleModule.Hdl
	labelModule, err := label.InitModule(db)
	if err != nil {
		return nil, err
	}
	handler := labelModule.Hdl
	interactiveModule, err := interactive.InitModule(db, mq)
	if err != nil {
		return nil, err
	}
	webHandler := interactiveModule.Hdl
	commentModule, err := comment.InitModule(db)
	if err != nil {
		return nil, err
	}
	handler2 := commentModule.Hdl
	client := InitES()
	searchModule, err := search.InitModule(client, mq)
	if err != nil {
		return nil, err
	}
	handler3 := searchModule.Hdl
	component := InitGinXServer(provider, userHandler, articleHandler, handler, webHandler, handler2, handler3)
	app := &App{
		Web: component,
	}
	return app, nil
}

// wire.go:

var BaseSet = wire.NewSet(InitDB, InitSession, InitRedis, InitMq, InitES)
